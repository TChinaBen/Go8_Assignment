{"ID":"1.1.1","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-apiserver.yaml; then stat -c permissions=%a /etc/kubernetes/manifests/kube-apiserver.yaml; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.2","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-apiserver.yaml; then stat -c %U:%G /etc/kubernetes/manifests/kube-apiserver.yaml; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.3","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-controller-manager.yaml; then stat -c permissions=%a /etc/kubernetes/manifests/kube-controller-manager.yaml; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.4","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-controller-manager.yaml; then stat -c %U:%G /etc/kubernetes/manifests/kube-controller-manager.yaml; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.5","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-scheduler.yaml; then stat -c permissions=%a /etc/kubernetes/manifests/kube-scheduler.yaml; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.6","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-scheduler.yaml; then stat -c %U:%G /etc/kubernetes/manifests/kube-scheduler.yaml; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.7","Audit":"/bin/sh -c 'if test -e etcd; then find etcd -name '*etcd*' | xargs stat -c permissions=%a; fi'","State":"FAIL","ActualResult":"","Remediation":"Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 etcd\n"}
{"ID":"1.1.8","Audit":"/bin/sh -c 'if test -e etcd; then find etcd -name '*etcd*' | xargs stat -c %U:%G; fi'","State":"FAIL","ActualResult":"","Remediation":"Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root etcd\n"}
{"ID":"1.1.9","Audit":"find /var/lib/cni/networks -type f 2 \u003e /dev/null | xargs --no-run-if-empty stat -c permissions=%a\n","State":"FAIL","ActualResult":"","Remediation":"Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 \u003cpath/to/cni/files\u003e\n"}
{"ID":"1.1.10","Audit":"find /var/lib/cni/networks -type f 2 \u003e /dev/null | xargs --no-run-if-empty stat -c %U:%G","State":"FAIL","ActualResult":"","Remediation":"Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root \u003cpath/to/cni/files\u003e\n"}
{"ID":"1.1.11","Audit":"find /var/lib/etcd | xargs stat -c permissions=%a","State":"FAIL","ActualResult":"","Remediation":"On the etcd server node, get the etcd data directory, passed as an argument --data-dir,\nfrom the below command:\nps -ef | grep etcd\nRun the below command (based on the etcd data directory found above). For example,\nchmod 700 /var/lib/etcd\n"}
{"ID":"1.1.12","Audit":"find /var/lib/etcd | xargs stat -c %U:%G","State":"FAIL","ActualResult":"","Remediation":"On the etcd server node, get the etcd data directory, passed as an argument --data-dir,\nfrom the below command:\nps -ef | grep etcd\nRun the below command (based on the etcd data directory found above).\nFor example, chown etcd:etcd /var/lib/etcd\n"}
{"ID":"1.1.13","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c permissions=%a /etc/kubernetes/admin.conf; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.14","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c %U:%G /etc/kubernetes/admin.conf; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.15","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c permissions=%a /etc/kubernetes/scheduler.conf; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.16","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c %U:%G /etc/kubernetes/scheduler.conf; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.17","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then stat -c permissions=%a /etc/kubernetes/controller-manager.conf; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.18","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then stat -c %U:%G /etc/kubernetes/controller-manager.conf; fi'","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.19","Audit":"find /etc/kubernetes/pki/ | xargs stat -c %U:%G","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.20","Audit":"find /etc/kubernetes/pki/ -name '*.crt' | xargs stat -c permissions=%a","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.1.21","Audit":"find /etc/kubernetes/pki/ -name '*.key' | xargs stat -c permissions=%a","State":"FAIL","ActualResult":"","Remediation":"Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod -R 600 /etc/kubernetes/pki/*.key\n"}
{"ID":"1.2.1","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--anonymous-auth=false\n"}
{"ID":"1.2.2","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.3","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.4","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.5","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.6","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.7","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.8","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.9","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Follow the Kubernetes documentation and set the desired limits in a configuration file.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\nand set the below parameters.\n--enable-admission-plugins=...,EventRateLimit,...\n--admission-control-config-file=\u003cpath/to/configuration/file\u003e\n"}
{"ID":"1.2.10","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.11","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to include\nAlwaysPullImages.\n--enable-admission-plugins=...,AlwaysPullImages,...\n"}
{"ID":"1.2.12","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to include\nSecurityContextDeny, unless PodSecurityPolicy is already in place.\n--enable-admission-plugins=...,SecurityContextDeny,...\n"}
{"ID":"1.2.13","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.14","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.15","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Follow the documentation and create Pod Security Policy objects as per your environment.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to a\nvalue that includes PodSecurityPolicy:\n--enable-admission-plugins=...,PodSecurityPolicy,...\nThen restart the API Server.\n"}
{"ID":"1.2.16","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.17","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.18","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.19","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.20","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.21","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-path parameter to a suitable path and\nfile where you would like audit logs to be written, for example:\n--audit-log-path=/var/log/apiserver/audit.log\n"}
{"ID":"1.2.22","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxage parameter to 30 or as an appropriate number of days:\n--audit-log-maxage=30\n"}
{"ID":"1.2.23","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxbackup parameter to 10 or to an appropriate\nvalue.\n--audit-log-maxbackup=10\n"}
{"ID":"1.2.24","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxsize parameter to an appropriate size in MB.\nFor example, to set it as 100 MB:\n--audit-log-maxsize=100\n"}
{"ID":"1.2.26","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.27","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.28","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.29","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.30","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.31","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.32","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.33","Audit":"ENCRYPTION_PROVIDER_CONFIG=$(ps -ef | grep kube-apiserver | grep -- --encryption-provider-config | sed 's%.*encryption-provider-config[= ]\\([^ ]*\\).*%\\1%')\nif test -e $ENCRYPTION_PROVIDER_CONFIG; then grep -A1 'providers:' $ENCRYPTION_PROVIDER_CONFIG | tail -n1 | grep -o \"[A-Za-z]*\" | sed 's/^/provider=/'; fi\n","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.2.34","Audit":"/bin/ps -ef | grep kube-apiserver | grep -v grep","State":"FAIL","ActualResult":"","Remediation":"Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM\n_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM\n_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM\n_SHA384\n"}
{"ID":"1.3.1","Audit":"/bin/ps -ef | grep kube-controller | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.3.2","Audit":"/bin/ps -ef | grep kube-controller | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.3.3","Audit":"/bin/ps -ef | grep kube-controller | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.3.4","Audit":"/bin/ps -ef | grep kube-controller | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.3.5","Audit":"/bin/ps -ef | grep kube-controller | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.3.6","Audit":"/bin/ps -ef | grep kube-controller | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.3.7","Audit":"/bin/ps -ef | grep kube-controller | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.4.1","Audit":"/bin/ps -ef | grep kube-scheduler | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"1.4.2","Audit":"/bin/ps -ef | grep kube-scheduler | grep -v grep","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.1","Audit":"/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c permissions=%a /lib/systemd/system/kubelet.service; fi' ","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.2","Audit":"/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c %U:%G /lib/systemd/system/kubelet.service; fi' ","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.3","Audit":"/bin/sh -c 'if test -e proxy; then stat -c permissions=%a proxy; fi' ","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.4","Audit":"/bin/sh -c 'if test -e proxy; then stat -c %U:%G proxy; fi' ","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.5","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.6","Audit":"/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.7","Audit":"CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.8","Audit":"CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.9","Audit":"/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.1.10","Audit":"/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.2.1","Audit":"/bin/ps -fC kubelet","State":"FAIL","ActualResult":"","Remediation":"If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"}
{"ID":"4.2.2","Audit":"/bin/ps -fC kubelet","State":"FAIL","ActualResult":"","Remediation":"If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"}
{"ID":"4.2.3","Audit":"/bin/ps -fC kubelet","State":"FAIL","ActualResult":"","Remediation":"If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=\u003cpath/to/client-ca-file\u003e\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"}
{"ID":"4.2.4","Audit":"/bin/ps -fC kubelet","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.2.5","Audit":"/bin/ps -fC kubelet","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.2.6","Audit":"/bin/ps -fC kubelet","State":"FAIL","ActualResult":"","Remediation":"If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"}
{"ID":"4.2.7","Audit":"/bin/ps -fC kubelet","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.2.8","Audit":"/bin/ps -fC kubelet ","State":"FAIL","ActualResult":"","Remediation":"Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"}
{"ID":"4.2.9","Audit":"/bin/ps -fC kubelet","State":"FAIL","ActualResult":"","Remediation":"If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"}
{"ID":"4.2.10","Audit":"/bin/ps -fC kubelet","State":"FAIL","ActualResult":"","Remediation":"If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=\u003cpath/to/tls-certificate-file\u003e\n--tls-private-key-file=\u003cpath/to/tls-key-file\u003e\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"}
{"ID":"4.2.11","Audit":"/bin/ps -fC kubelet","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.2.12","Audit":"/bin/ps -fC kubelet","State":"PASS","ActualResult":"","Remediation":""}
{"ID":"4.2.13","Audit":"/bin/ps -fC kubelet","State":"FAIL","ActualResult":"","Remediation":"If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"}
